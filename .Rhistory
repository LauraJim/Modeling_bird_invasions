f.rs.nat <- paste0("./Nf_modeling/accessible-areas-v3/",agafis,
"_native_range.csv")
f.rs.nat <- paste0("./Nf_modeling/accessible-areas-v3/","agafis",
"_native_range.csv")
sp.rs.nat <- read.csv(f.rs.nat,header=T)[,-1]
head(sp.rs.nat)
plot(sp.rs.nat$PC1,sp.rs.nat$PC2)
install.packages("simukde")
simuwd <- simukde::simulate_kde(x = sp.rs.nat[,3:4], n = 1000)
simuwd <- simukde::simulate_kde(x = sp.rs.nat[1:100,3:4], n = 100)
x11()
plot(simuwd$kde, display = "filled.contour")
points(x = simuwd$random.values, cex = 0.25, pch = 16, col = "green")
points(x = sp.rs.nat[1:100,3:4], cex = 0.25, pch = 16, col = "black")
simuwd <- simukde::simulate_kde(x = sp.rs.nat[1:1000,3:4], n = 1000)
library(rgdal)
library(raster)
library(dismo)
library(ggplot2)
library(ecospat)
install.packages("ecospat")
install.packages("ecospat", type = "source")
install.packages("devtools")
install.packages("ecospat", type = "source")
devtools::find_rtools()
library(rgdal)
library(raster)
library(dismo)
library(ggplot2)
library(ecospat)
# Read species IDs
bird.species <- list.dirs(path = "./ranges", full.names = FALSE, recursive = FALSE)
##occurrence data
native.occs <- readOGR("./occurrences","native.range")
invasive.occs <- readOGR("./occurrences","invasive.range")
## relevant regions
europe.default <- readOGR("./biogeo","europe")
bioregs <- readOGR("./biogeo","newRealms")
# summary information
sp.nocc.ini <- vector("numeric",length = length(bird.species))
sp.nocc.end <- sp.nocc.ini
sp.nocc.rare <- sp.nocc.ini
sp.nocc.inv <- sp.nocc.ini
sp.nocc.inv.rare <- sp.nocc.ini
for (x in 1:length(bird.species)){
species.id <- bird.species[x]
# 1) select species occurrences from GBIF dataset
native.bird <- native.occs[native.occs$species==species.id,]
# initial sample size
sp.nocc.ini[x] <- nrow(native.bird)
invasive.bird <- invasive.occs[invasive.occs$species==species.id,]
sp.nocc.inv[x] <- nrow(invasive.bird)
# 2) restrict GBIF data to occurrences within (close to) native range boundaries
native.range.shp <- readOGR(paste0("./ranges/",species.id),species.id)
#http://datazone.birdlife.org/species/spcdistPOS
#subset BirdLife shape files
#keep native and reintroduced ranges
native.range.shp <- native.range.shp[which(native.range.shp$ORIGIN == 1 |native.range.shp$ORIGIN == 2),]
#keep resident and breeding season ranges
native.range.shp <- native.range.shp[which(native.range.shp$SEASONAL == 1 |native.range.shp$SEASONAL == 2),]
#buffer with 0.5?C
native.range.shp <- buffer(native.range.shp,width=0.5,dissolve=TRUE)
#plot(native.range.shp)
#keep only occurrences that are within the buffered native range
native.bird.BL <- raster::intersect(native.bird,native.range.shp)
# sample size after restriction
sp.nocc.end[x] <- nrow(native.bird.BL)
# 3) rarefy occurrrence data
native.bird.rare <- sp::remove.duplicates(native.bird.BL, zero = 50) # WGS 84 units are meters
# data frame with longitude and latitude coordinates
native.bird.rare.ll <- native.bird.rare@data[,1:2] # to get data
# sample size of thinned dataset
sp.nocc.rare[x] <- nrow(native.bird.rare.ll)
invasive.bird.rare <- sp::remove.duplicates(invasive.bird, zero = 50)
invasive.bird.rare.ll <- invasive.bird.rare@data[,1:2]
# number of occurrences in the invasive area after thinning
sp.nocc.inv.rare[x] <- nrow(invasive.bird.rare.ll)
#native.bird.rare <- humboldt.occ.rarefy(in.pts=native.bird,colxy=1:2, rarefy.dist = 50, rarefy.units = "km")
#invasive.bird.rare <- humboldt.occ.rarefy(in.pts=invasive.bird,colxy=1:2, rarefy.dist = 50, rarefy.units = "km")
# 4) Read PCA layers
pc.native <- stack(paste0("./bioreg_occ_dist_allgrids/",paste0(species.id,"/"),
species.id,"_allGridsPCA.native.tif"))
pc.invasive <- stack(paste0("./bioreg_occ_dist_allgrids/",paste0(species.id,"/"),
species.id,"_allGridsPCA.invasive.tif"))
# 5) Add environmental data to rarefied occurrences
native.bird.rare.vars <- data.frame(extract(pc.native,native.bird.rare))
invasive.bird.rare.vars <- data.frame(extract(pc.invasive,invasive.bird.rare))
# paste data frames (longitude, latitude, PC1, PC2)
native.bird.rare.vars <- na.omit(data.frame(native.bird.rare.ll,native.bird.rare.vars))
invasive.bird.rare.vars <- na.omit(data.frame(invasive.bird.rare.ll,invasive.bird.rare.vars))
# adjust column names
colnames(native.bird.rare.vars) <- c("lon","lat","PC1","PC2")
colnames(invasive.bird.rare.vars) <- c("lon","lat","PC1","PC2")
# 6) Save tables
write.csv(native.bird.rare.vars,paste0("./Nf_modeling/occurrences-newPAC/",
species.id,"_native.csv"))
write.csv(invasive.bird.rare.vars,paste0("./Nf_modeling/occurrences-newPCA/",
species.id,"_invasive.csv"))
# 7) Select random points inside accessible area and add PC values
N <- 10000
rp.aa <- data.frame(randomPoints(pc.native,N,p=native.bird.rare,excludep=T))
rp.aa.vars <- data.frame(extract(pc.native,rp.aa))
rp.aa.vars <- na.omit(data.frame(rp.aa,rp.aa.vars))
colnames(rp.aa.vars) <- c("lon","lat","PC1","PC2")
write.csv(rp.aa.vars,paste0("./Nf_modeling/accessible-areas-newPCA/",
species.id,"_native_range.csv"))
# 8) Create table with random points inside the invaded region
rp.ir <- data.frame(randomPoints(pc.invasive,N/2,p=invasive.bird.rare,excludep=T))
rp.ir.vars <- data.frame(extract(pc.invasive,rp.ir))
rp.ir.vars <- na.omit(data.frame(rp.ir,rp.ir.vars))
colnames(rp.ir.vars) <- c("lon","lat","PC1","PC2")
write.csv(rp.ir.vars,paste0("./Nf_modeling/accessible-areas-newPCA/",
species.id,"_invaded_region.csv"))
} #end of for-loop
x=1
species.id <- bird.species[x]
# 1) select species occurrences from GBIF dataset
native.bird <- native.occs[native.occs$species==species.id,]
# initial sample size
sp.nocc.ini[x] <- nrow(native.bird)
invasive.bird <- invasive.occs[invasive.occs$species==species.id,]
sp.nocc.inv[x] <- nrow(invasive.bird)
# 2) restrict GBIF data to occurrences within (close to) native range boundaries
native.range.shp <- readOGR(paste0("./ranges/",species.id),species.id)
#http://datazone.birdlife.org/species/spcdistPOS
#subset BirdLife shape files
#keep native and reintroduced ranges
native.range.shp <- native.range.shp[which(native.range.shp$ORIGIN == 1 |native.range.shp$ORIGIN == 2),]
#keep resident and breeding season ranges
native.range.shp <- native.range.shp[which(native.range.shp$SEASONAL == 1 |native.range.shp$SEASONAL == 2),]
#buffer with 0.5?C
native.range.shp <- buffer(native.range.shp,width=0.5,dissolve=TRUE)
install.packages("geobuffer")
devtools::install_github("valentinitnelav/geobuffer")
library(geobuffer)
#buffer with 0.5?C
native.range.shp <- gBuffer(native.range.shp,width=0.5)
library(rgeos)
install.packages("rgeos")
#buffer with 0.5?C
native.range.shp <- gBuffer(native.range.shp,width=0.5)
library(rgeos)
#buffer with 0.5?C
native.range.shp <- gBuffer(native.range.shp,width=0.5)
plot(native.range.shp)
#keep only occurrences that are within the buffered native range
native.bird.BL <- raster::intersect(native.bird,native.range.shp)
# sample size after restriction
sp.nocc.end[x] <- nrow(native.bird.BL)
# 3) rarefy occurrrence data
native.bird.rare <- sp::remove.duplicates(native.bird.BL, zero = 50) # WGS 84 units are meters
# data frame with longitude and latitude coordinates
native.bird.rare.ll <- native.bird.rare@data[,1:2] # to get data
# sample size of thinned dataset
sp.nocc.rare[x] <- nrow(native.bird.rare.ll)
invasive.bird.rare <- sp::remove.duplicates(invasive.bird, zero = 50)
invasive.bird.rare.ll <- invasive.bird.rare@data[,1:2]
# number of occurrences in the invasive area after thinning
sp.nocc.inv.rare[x] <- nrow(invasive.bird.rare.ll)
# 4) Read PCA layers
pc.native <- stack(paste0("./bioreg_occ_dist_allgrids/",paste0(species.id,"/"),
species.id,"_allGridsPCA.native.tif"))
pc.invasive <- stack(paste0("./bioreg_occ_dist_allgrids/",paste0(species.id,"/"),
species.id,"_allGridsPCA.invasive.tif"))
# 5) Add environmental data to rarefied occurrences
native.bird.rare.vars <- data.frame(extract(pc.native,native.bird.rare))
invasive.bird.rare.vars <- data.frame(extract(pc.invasive,invasive.bird.rare))
# paste data frames (longitude, latitude, PC1, PC2)
native.bird.rare.vars <- na.omit(data.frame(native.bird.rare.ll,native.bird.rare.vars))
invasive.bird.rare.vars <- na.omit(data.frame(invasive.bird.rare.ll,invasive.bird.rare.vars))
# adjust column names
colnames(native.bird.rare.vars) <- c("lon","lat","PC1","PC2")
colnames(invasive.bird.rare.vars) <- c("lon","lat","PC1","PC2")
# 6) Save tables
write.csv(native.bird.rare.vars,paste0("./Nf_modeling/occurrences-newPAC/",
species.id,"_native.csv"))
# 6) Save tables
write.csv(native.bird.rare.vars,paste0("./Nf_modeling/occurrences-newPCA/",
species.id,"_native.csv"))
write.csv(invasive.bird.rare.vars,paste0("./Nf_modeling/occurrences-newPCA/",
species.id,"_invasive.csv"))
# 7) Select random points inside accessible area and add PC values
N <- 10000
rp.aa <- data.frame(randomPoints(pc.native,N,p=native.bird.rare,excludep=T))
rp.aa.vars <- data.frame(extract(pc.native,rp.aa))
rp.aa.vars <- na.omit(data.frame(rp.aa,rp.aa.vars))
colnames(rp.aa.vars) <- c("lon","lat","PC1","PC2")
write.csv(rp.aa.vars,paste0("./Nf_modeling/accessible-areas-newPCA/",
species.id,"_native_range.csv"))
# 8) Create table with random points inside the invaded region
rp.ir <- data.frame(randomPoints(pc.invasive,N/2,p=invasive.bird.rare,excludep=T))
rp.ir.vars <- data.frame(extract(pc.invasive,rp.ir))
rp.ir.vars <- na.omit(data.frame(rp.ir,rp.ir.vars))
colnames(rp.ir.vars) <- c("lon","lat","PC1","PC2")
write.csv(rp.ir.vars,paste0("./Nf_modeling/accessible-areas-newPCA/",
species.id,"_invaded_region.csv"))
library(rgdal)
library(raster)
library(dismo)
library(ggplot2)
library(ecospat)
library(rgeos)
# Read species IDs
bird.species <- list.dirs(path = "./ranges", full.names = FALSE, recursive = FALSE)
native.occs <- readOGR("./occurrences","native.range")
invasive.occs <- readOGR("./occurrences","invasive.range")
europe.default <- readOGR("./biogeo","europe")
bioregs <- readOGR("./biogeo","newRealms")
sp.nocc.ini <- vector("numeric",length = length(bird.species))
sp.nocc.end <- sp.nocc.ini
sp.nocc.rare <- sp.nocc.ini
sp.nocc.inv <- sp.nocc.ini
sp.nocc.inv.rare <- sp.nocc.ini
for (x in 1:length(bird.species)){
species.id <- bird.species[x]
# 1) select species occurrences from GBIF dataset
native.bird <- native.occs[native.occs$species==species.id,]
# initial sample size
sp.nocc.ini[x] <- nrow(native.bird)
invasive.bird <- invasive.occs[invasive.occs$species==species.id,]
sp.nocc.inv[x] <- nrow(invasive.bird)
# 2) restrict GBIF data to occurrences within (close to) native range boundaries
native.range.shp <- readOGR(paste0("./ranges/",species.id),species.id)
#http://datazone.birdlife.org/species/spcdistPOS
#subset BirdLife shape files
#keep native and reintroduced ranges
native.range.shp <- native.range.shp[which(native.range.shp$ORIGIN == 1 |native.range.shp$ORIGIN == 2),]
#keep resident and breeding season ranges
native.range.shp <- native.range.shp[which(native.range.shp$SEASONAL == 1 |native.range.shp$SEASONAL == 2),]
#buffer with 0.5?C
native.range.shp <- gBuffer(native.range.shp,width=0.5)
#plot(native.range.shp)
#keep only occurrences that are within the buffered native range
native.bird.BL <- raster::intersect(native.bird,native.range.shp)
# sample size after restriction
sp.nocc.end[x] <- nrow(native.bird.BL)
# 3) rarefy occurrrence data
native.bird.rare <- sp::remove.duplicates(native.bird.BL, zero = 50) # WGS 84 units are meters
# data frame with longitude and latitude coordinates
native.bird.rare.ll <- native.bird.rare@data[,1:2] # to get data
# sample size of thinned dataset
sp.nocc.rare[x] <- nrow(native.bird.rare.ll)
invasive.bird.rare <- sp::remove.duplicates(invasive.bird, zero = 50)
invasive.bird.rare.ll <- invasive.bird.rare@data[,1:2]
# number of occurrences in the invasive area after thinning
sp.nocc.inv.rare[x] <- nrow(invasive.bird.rare.ll)
#native.bird.rare <- humboldt.occ.rarefy(in.pts=native.bird,colxy=1:2, rarefy.dist = 50, rarefy.units = "km")
#invasive.bird.rare <- humboldt.occ.rarefy(in.pts=invasive.bird,colxy=1:2, rarefy.dist = 50, rarefy.units = "km")
# 4) Read PCA layers
pc.native <- stack(paste0("./bioreg_occ_dist_allgrids/",paste0(species.id,"/"),
species.id,"_allGridsPCA.native.tif"))
pc.invasive <- stack(paste0("./bioreg_occ_dist_allgrids/",paste0(species.id,"/"),
species.id,"_allGridsPCA.invasive.tif"))
# 5) Add environmental data to rarefied occurrences
native.bird.rare.vars <- data.frame(extract(pc.native,native.bird.rare))
invasive.bird.rare.vars <- data.frame(extract(pc.invasive,invasive.bird.rare))
# paste data frames (longitude, latitude, PC1, PC2)
native.bird.rare.vars <- na.omit(data.frame(native.bird.rare.ll,native.bird.rare.vars))
invasive.bird.rare.vars <- na.omit(data.frame(invasive.bird.rare.ll,invasive.bird.rare.vars))
# adjust column names
colnames(native.bird.rare.vars) <- c("lon","lat","PC1","PC2")
colnames(invasive.bird.rare.vars) <- c("lon","lat","PC1","PC2")
# 6) Save tables
write.csv(native.bird.rare.vars,paste0("./Nf_modeling/occurrences-newPCA/",
species.id,"_native.csv"))
write.csv(invasive.bird.rare.vars,paste0("./Nf_modeling/occurrences-newPCA/",
species.id,"_invasive.csv"))
# 7) Select random points inside accessible area and add PC values
N <- 10000
rp.aa <- data.frame(randomPoints(pc.native,N,p=native.bird.rare,excludep=T))
rp.aa.vars <- data.frame(extract(pc.native,rp.aa))
rp.aa.vars <- na.omit(data.frame(rp.aa,rp.aa.vars))
colnames(rp.aa.vars) <- c("lon","lat","PC1","PC2")
write.csv(rp.aa.vars,paste0("./Nf_modeling/accessible-areas-newPCA/",
species.id,"_native_range.csv"))
# 8) Create table with random points inside the invaded region
rp.ir <- data.frame(randomPoints(pc.invasive,N/2,p=invasive.bird.rare,excludep=T))
rp.ir.vars <- data.frame(extract(pc.invasive,rp.ir))
rp.ir.vars <- na.omit(data.frame(rp.ir,rp.ir.vars))
colnames(rp.ir.vars) <- c("lon","lat","PC1","PC2")
write.csv(rp.ir.vars,paste0("./Nf_modeling/accessible-areas-newPCA/",
species.id,"_invaded_region.csv"))
} #end of for-loop
# Save summary information
sum.table <- cbind(bird.species,sp.nocc.ini,sp.nocc.end,sp.nocc.rare,
sp.nocc.inv,sp.nocc.inv.rare)
colnames(sum.table) <- c("speciesID","N.initial","N.cleaned","N.rarefied",
"N.invasive","N.inv.rarefied")
write.csv(sum.table,"./Nf_modeling/allspecies_samplesizes_newPCA.csv",row.names = F)
# Read functions
source(".\\Nf_modeling\\fit_wn_maha_model.R")
# Packages
library(scales)
# Read species IDs
sp.id <- read.csv("./Nf_modeling/allspecies_samplesizes_newPCA.csv",header=T)[,c(1,4,6)]
# Summary table with estimated parameters
mle.summary <- matrix(0,nrow = nrow(sp.id),ncol = 8)
colnames(mle.summary) <- c("speciesID", "N", "mu1", "mu2", "sigma11",
"sigma12", "sigma22", "def.pos")
# Confidence levels of ellipses in the figures
lvs <- c(0.25,0.5,0.75,0.95)
# Set colorpalette:
colpal <- c(alpha("grey70",0.7), alpha("gold3",0.7), "purple3", "grey10",
"brown")
# BEFORE RUNNING: change file paths!!!
# See lines: 37,40,45,49,72,107,130,139
#c(12,15,18)
for (j in 1:nrow(sp.id)) {
# 1) Sample sizes
n.nat <- sp.id[j,2]
n.inv <- sp.id[j,3]
# 2) Read occurrence data
# native range, used to fit the models
f.occ.nat <- paste0("./Nf_modeling/occurrences-newPCA/",sp.id[j,1],"_native.csv")
sp.occ.nat <- read.csv(f.occ.nat,header=T)[,-1]
# invasive range, used to evaluate the models
f.occ.inv <- paste0("./Nf_modeling/occurrences-newPCA/",sp.id[j,1],"_invasive.csv")
sp.occ.inv <- read.csv(f.occ.inv,header=T)[,-1]
# 3) Read tables with random samples in the native and invaded areas
# native range, used to fit the models
f.rs.nat <- paste0("./Nf_modeling/accessible-areas-newPCA/",sp.id[j,1],
"_native_range.csv")
sp.rs.nat <- read.csv(f.rs.nat,header=T)[,-1]
# invasive range, used to evaluate the models
f.rs.inv <- paste0("./Nf_modeling/accessible-areas-newPCA/",sp.id[j,1],
"_invaded_region.csv")
sp.rs.inv <- read.csv(f.rs.inv,header=T)[,-1]
# 4) Apply functions to estimate parameters
mle <- fitNiche(E.occ = sp.occ.nat[,3:4], E.samM = sp.rs.nat[,3:4])
# 5)
if(mle$dp == 1){ # Sigma is positive definite
# 5.1) Save estimated parameters in the summary table
mle.summary[j,] <- c(sp.id[j,1],n.nat,mle$wn.mu,
as.vector(mle$wn.sigma)[-2],mle$dp)
# 5.2) Define ellipses using these estimates
ellis <- list()
for(i in 1:length(lvs)){
ellis[[i]] <- ellipse::ellipse(x=mle$wn.sigma, centre=as.numeric(mle$wn.mu), level=lvs[i])
}
# Visualization of results
# 5.3) PLOT
# plot will be saved as .png
png(paste0("./Nf_modeling/Results-newPCA/",sp.id[j,1],"_modelfit.png"),
width = 1800, height = 1800, res = 300, pointsize = 8)
# x11()
# background points from accessible area, using invaded regions to set plot limits
plot(rbind(sp.rs.nat[,3:4],sp.rs.inv[,3:4]),col=colpal[1],pch=1,
xlab="PC1", ylab="PC2",
cex.lab=1.3,main="Environmental space")
# add points from invaded region
points(sp.rs.inv[,3:4],col=colpal[2],pch=1)
# ellipse wn
for(x in 1:length(lvs)){lines(ellis[[x]],col=colpal[3],lwd=2)}
# add centre of estimated niche
points(matrix(mle$wn.mu,ncol=2),col=colpal[3],pch=19,cex=1.5)
# add presence points used to fit model
points(sp.occ.nat[,3:4],col=colpal[4],pch=19,cex=1.3)
# add presence points use to evaluate model
points(sp.occ.inv[,3:4],col=colpal[5],pch=17,cex=1.3)
# figure's legend
legend("bottomleft",legend = c(paste("Species ID:",sp.id[j,1]),"Native range",
"Invaded region","Occurrences",
"Recorded invasions", "Fitted model"),
pch=c(NA,19,19,19,17,NA),col = c("white", colpal[c(1:2,4:5,3)]),
lwd=c(rep(NA,5),2),bty = "n")
# finish saving png
dev.off()
}
else{
# 5.1) save Mahalanobis model in the summary table
mle.summary[j,] <- c(sp.id[j,1], n.nat, mle$maha.mu,
as.vector(mle$maha.sigma)[-2],mle$dp)
# 5.2) Define ellipses using these estimates
ellis <- list()
for(i in 1:length(lvs)){
ellis[[i]] <- ellipse::ellipse(x=mle$maha.sigma, centre=as.numeric(mle$maha.mu), level=lvs[i])
}
# Warning message
print(paste("Warning!","Estimated matrix is not positive definite for species:",
sp.id[j,1]))
# 5.3) PLOT
# plot will be saved as .png
png(paste0("./Nf_modeling/Results-newPCA/",sp.id[j,1],"_modelfit.png"),
width = 1800, height = 1800, res = 300, pointsize = 8)
# x11()
# background points from accessible area
plot(rbind(sp.rs.nat[,3:4],sp.rs.inv[,3:4]),col=colpal[1],pch=1, xlab="PC1", ylab="PC2", cex.lab=1.3,
main="Environmental space")
# add points from invaded region
points(sp.rs.inv[,3:4],col=colpal[2],pch=1)
# ellipse wn
for(x in 1:length(lvs)){lines(ellis[[x]],col=colpal[3],lwd=2)}
# add presence points used to fit model
points(sp.occ.nat[,3:4],col=colpal[4],pch=19,cex=1.3)
# add presence points use to evaluate model
points(sp.occ.inv[,3:4],col=colpal[5],pch=17,cex=1.3)
# figure's legend
legend("bottomleft",legend = c(paste("Species ID:",sp.id[j,1]),"Native range",
"Invaded region","Occurrences",
"Recorded invasions", "Fitted model"),
pch=c(NA,19,19,19,17,NA),col = c("white", colpal[c(1:2,4:5,3)]),
lwd=c(rep(NA,5),2),bty = "n")
# finish saving png
dev.off()
}
# 7) SAVE estimated parameters for all the species
if(j==nrow(sp.id))
write.csv(mle.summary,"./Nf_modeling/Results-newPCA/mle_allspecies_newPCA.csv",row.names = F)
#print(mle.summary)
}
source(".\\Nf_modeling\\GEspace.R")
install.packages("rnaturalearth")
# Read table with estimated parameters of niche model
mles <- read.csv("./Nf_modeling/Results-newPCA/mle_allspecies_PCA.csv",header=T)
# Read table with estimated parameters of niche model
mles <- read.csv("./Nf_modeling/Results-newPCA/mle_allspecies_newPCA.csv",header=T)
# read table of a species occurrence with environmental data points and table
#  with random background points that contain environmental data
species <- read.csv("./Nf_modeling/occurrences-newPCA/plomel_native.csv",header=T)[,-1]
ranpoints <- read.csv("./Nf_modeling/accessible-areas-newPCA/plomel_native_range.csv",header=T)[,-1]
# Plot datasets in both Geographic and Environmental spaces
GE.space(bckgrnd=ranpoints, GE.occ=species)
install.packages("sf")
install.packages("rnaturalearthdata")
source(".\\Nf_modeling\\GEspace.R")
source(".\\Nf_modeling\\nicheG.R")
# Plot datasets in both Geographic and Environmental spaces
GE.space(bckgrnd=ranpoints, GE.occ=species)
# Read table with estimated parameters of niche model
mles <- read.csv("./Nf_modeling/Results-newPCA/mle_allspecies_newPCA.csv",header=T)
for (k in 1:nrow(mles)) {
# Select species
species.id <- mles[k,1]
# Project model into the native range
pc.native <- stack(paste0("./bioreg_occ_dist_allgrids/",paste0(species.id,"/"),
species.id,"_allGridsPCA.native.tif"))
suit.wn.nat <- niche.G(Estck = pc.native, mu = c(mles[k,3],mles[k,4]),
Sigma = matrix(c(mles[k,5], mles[k,6], mles[k,6],
mles[k,7]),ncol=2))
writeRaster(suit.wn.nat,paste0("./Nf_modeling/Results-newPCA/",species.id,
"_suitability_map_nat.tif"), overwrite = T)
# Project model into the invaded region
pc.invasive <- stack(paste0("./bioreg_occ_dist_allgrids/",paste0(species.id,"/"),
species.id,"_allGridsPCA.invasive.tif"))
suit.wn.inv <- niche.G(Estck = pc.invasive, mu = c(mles[k,3],mles[k,4]),
Sigma = matrix(c(mles[k,5], mles[k,6], mles[k,6],
mles[k,7]),ncol=2))
writeRaster(suit.wn.inv,paste0("./Nf_modeling/Results-newPCA/",species.id,
"_suitability_map_inv.tif"), overwrite = T)
}
